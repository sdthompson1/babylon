# This simply adds examples of each of the lexer's possible token
# types to the AFL dictionary, along with some whitespace characters
# and comment markers.
# This should hopefully allow AFL to find "interesting" input examples
# more rapidly than if it was just flipping bits completely at random.

ws_space=" "
ws_tab="\x09"
ws_newline="\x0a"

line_comment="//"
block_comment_start="/*"
block_comment_end="*/"

int_literal="123"
string_literal="\"hello\""
string_literal_with_escapes="\"\x00\xff\\n\""
name="abc"

kw_allocated="allocated"
kw_assert="assert"
kw_assume="assume"
kw_bool="bool"
kw_case="case"
kw_cast="cast"
kw_const="const"
kw_datatype="datatype"
kw_decreases="decreases"
kw_else="else"
kw_ensures="ensures"
kw_exists="exists"
kw_extern="extern"
kw_false="false"
kw_fix="fix"
kw_forall="forall"
kw_function="function"
kw_ghost="ghost"
kw_hide="hide"
kw_i8="i8"
kw_i16="i16"
kw_i32="i32"
kw_i64="i64"
kw_if="if"
kw_import="import"
kw_impure="impure"
kw_in="in"
kw_int="int"
kw_interface="interface"
kw_invariant="invariant"
kw_let="let"
kw_match="match"
kw_module="module"
kw_obtain="obtain"
kw_old="old"
kw_real="real"
kw_ref="ref"
kw_requires="requires"
kw_return="return"
kw_show="show"
kw_sizeof="sizeof"
kw_swap="swap"
kw_then="then"
kw_true="true"
kw_type="type"
kw_u8="u8"
kw_u16="u16"
kw_u32="u32"
kw_u64="u64"
kw_use="use"
kw_var="var"
kw_while="while"
kw_with="with"

plus="+"
minus="-"
star="*"
slash="/"
percent="%"

and="&"
and_and="&&"
bar="|"
bar_bar="||"
hat="^"
exclam="!"
tilde="~"

less="<"
less_less="<<"
less_equal="<="
less_equal_equal="<=="
less_equal_equal_greater="<==>"

greater=">"
greater_greater=">>"
greater_equal=">="

equal="="
equal_greater="=>"
equal_equal="=="
equal_equal_greater="==>"

exclam_equal="!="

colon=":"
semicolon=";"
comma=","
dot="."

lparen="("
rparen=")"
lbrace="{"
rbrace="}"
lbracket="["
rbracket="]"

underscore="_"
